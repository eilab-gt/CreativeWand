"""
LogItem.py

This file describes a class LogItem which represents contents from a single log file generated by CreativeWand.
"""

import json

supported_versions = ["2022.11.08.0", "2022.12.21.2"]


class LogItem(object):
    def __init__(
            self,
            from_file=None,
    ):
        """
        Create a new LogItem object.
        :param from_file: if not None, load information from file.
        """
        self.contents = {}
        if from_file is not None:
            self.open(from_file)

    def open(self, path: str):
        with open(path, 'r') as f:
            self.contents = json.load(f)
        self.version = self.contents["version"]

        if self.version not in supported_versions:
            print(
                f"Warning - Log version {self.version} not supported. Supported: {supported_versions}. May not parse properly.")
        self.session_id = self.contents["session_id"]
        self.session_type = self.contents["session_type"]
        self.session_code = self.contents["session_code"]
        self.session_mode = self.contents["session_mode"]
        self.created_at = self.contents["created_at"]

        self.frontend_logs = self.contents["frontend_logs"]
        self.manager_logs = self.contents["manager_logs"]

    def pretty_print(self):
        """
        Pretty print this log file.
        :return:
        """
        print("== Metadata ==")
        print(
            f"session info: uuid:{self.session_id} internal type:{self.session_type} participant ID:{self.session_code} ablation:{self.session_mode}")
        print(f"created at:{self.created_at} version:{self.version}")

        print("== Frontend Logs ==")
        self.pretty_frontend_logs()

        print("== Manager Logs ==")
        self.pretty_manager_logs()

    def pretty_frontend_logs(self):
        """
        Pretty print frontend logs.
        :return: None
        """
        for item in self.frontend_logs:
            id = item["id"]
            time = item["time"]
            type = item["type"]
            args0 = item["args0"]
            request = item["request"]
            returned = item["returned"]
            print(f"== logged call {id} of type {type} on {time} ==")
            if len(args0) > 0:
                print(f"First argument: {args0}")
            for key in request:
                if key != "args0":
                    print(f"{key}: {request[key]}")
            if returned != "None":
                print(f"Returned Value: {returned}")

    def pretty_manager_logs(self):
        """
        Pretty print manager logs.
        :return: None
        """
        for idx, item in enumerate(self.manager_logs):
            print(f"State #{idx}:\n==Start state dump==")
            print(item)
            print("==End state dump==")


if __name__ == '__main__':
    # Testing code
    item = LogItem("Samples/sample.json")
    item.pretty_print()
